===================
expression - bool
===================

(component foo []
	(foo {a: true}))

-------------------

(source_file
	(component_declaration
		(identifier)
		(properties)
		(template
			(element
				(identifier)
				(attributes
					(attribute
						(identifier)
						(bool)))))))

===================
expression - string
===================

(component foo []
	(foo {a: "foo"}))

-------------------

(source_file
	(component_declaration
		(identifier)
		(properties)
		(template
			(element
				(identifier)
				(attributes
					(attribute
						(identifier)
						(string)))))))


===================
expression - number
===================

(component foo []
	(foo {a: 0
	  	  b: 10}))

-------------------

(source_file
	(component_declaration
		(identifier)
		(properties)
		(template
			(element
				(identifier)
				(attributes
					(attribute
						(identifier)
						(number))
					(attribute
						(identifier)
						(number)))))))

===================
expression - call
===================

(component foo []
	(foo {a: (a true "" 10 foo)}))

-------------------

(source_file
	(component_declaration
		(identifier)
		(properties)
		(template
			(element
			(identifier)
			(attributes
				(attribute
					(identifier)
					(call
						(identifier)
						(bool)
						(string)
						(number)
						(identifier))))))))

=========================
expression - call - comma
=========================

(component foo []
	(foo {a: (a true, "", 10, foo)}))

-------------------------

(source_file
	(component_declaration
		(identifier)
		(properties)
		(template
			(element
			(identifier)
			(attributes
				(attribute
					(identifier)
					(call
						(identifier)
						(bool)
						(string)
						(number)
						(identifier))))))))

==========================
expression - call operator
==========================

(component foo []
	(foo {a: (> a "")}))

--------------------------

(source_file
	(component_declaration
		(identifier)
		(properties)
		(template
			(element
			(identifier)
			(attributes
				(attribute
					(identifier)
					(call
						(operator)
						(identifier)
						(string))))))))

===============================
expression - call - identifier
===============================

(component foo []
	(foo {a: (a)}))

-------------------------------

(source_file
	(component_declaration
		(identifier)
		(properties)
		(template
			(element
				(identifier)
				(attributes
					(attribute
						(identifier)
						(call
							(identifier))))))))

===================================
expression - call - member access
===================================

(component foo []
	(foo {a: (a/b)}))

-----------------------------------

(source_file
	(component_declaration
		name: (identifier)
		(properties)
		(template
			(element
				tag: (identifier)
				(attributes
					(attribute
						key: (identifier)
						value: (call
									func: (member_access
										object: (identifier)
										member: (identifier)))))))))

=========================================
expression - call
namespaced identifier as func not allowed
:error
=========================================

(component foo []
	(foo {a: (a.b)}))

-----------------------------------------

===================================================
expression - call - bool (true) as func not allowed
:skip
:error
===================================================

(component foo []
	(foo {a: (true)}))

---------------------------------------------------

====================================================
expression - call - bool (false) as func not allowed
:skip
:error
====================================================

(component foo []
	(foo {a: (false)}))

----------------------------------------------------

==============================================
expression - call - string as func not allowed
:error
==============================================

(component foo []
	(foo {a: ("")}))

-------------------

==============================================
expression - call - number as func not allowed
:error
==============================================

(component foo []
	(foo {a: (0)}))

----------------------------------------------
